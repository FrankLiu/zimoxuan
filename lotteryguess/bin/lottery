#!/usr/bin/env node

/**
 * Module dependencies.
 */
var version = require('../package.json').version,
	Parsers = require('../lib/parsers'),
	Statistics = require('../lib/statistics'),
	utils = require('../lib/utils'),

	fs = require('fs'),
	_u = require('underscore'),
	async = require('async'),
	program = require('commander'),
	colors = require('colors');

var LOTTERY_DESCRIPTION = "~~~~~~~~~~TiCai: %s~~~~~~~~~~";
var DEFAULT_HADER_LENGTH = 36;

var	DEFAULT_LOTTERY_TYPE = '11x5',
	DEFAULT_STRATEGY = 'hits',
	DEFAULT_PERIOD_DAYS = 1,
	DEFAULT_DURATION = 10,
	DEFAULT_DIFFERENCE_DEPTH = 1;
	
var COMMAND_ERROR = 'Illegal command. Use `lottery --help` to get more info.\n';

colors.setTheme({
  silly: 'rainbow',
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'green',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red'
});
program.version(version);
program.command('statistics')
	.description('statistics history numbers, sort or group them')
	.option('-t, --type <11x5|6p1>', 'lottery type', '11x5')
	.option('-s, --strategy <hits,groups>', 'Statistics strategy', 'groups')
	.option('-p, --period-days <1,3,5>>', 'period days, supportted 1,3,5', 1)
	.option('-d, --diff-deps <n>', 'difference depth <1-5>, used for hits statistics', 1)
	.option('-g, --group-by <4|5>', 'group by 4 numbers or 5 numbers', 5)
	.action(function(){
		var args = [].slice.call(arguments, 0);
		var opts = args[args.length - 1];
		if(opts.strategy == 'hits'){
			opts.guessNums = utils.padZero(args.slice(0, -1)[0], 2);
		}
		statistics(opts);
	});

program.command('download')
	.description('list the latest(KJ) numbers')
	.option('-t, --type <11x5|6p1>', 'lottery type', '11x5')
	.option('-p, --period-days <1,3,5>>', 'period days, supportted 1d,3d,5d', '1d')
	.action(function(opts){
		download(opts);
	});
	
program.command('latest')
	.description('list the latest(KJ) numbers')
	.option('-t, --type <11x5|6p1>', 'lottery type', '11x5')
	//.option('-p, --period-days <1,3,5>>', 'period days, supportted 1,3,5', 1)
	.option('-d, --duration <1-390>', 'duration')
	.action(function(opts){
		latest(opts);
	});

program.command('absence <number>')
	.description('list the absence(YL) information for given number')
	.option('-t, --type <11x5|6p1>', 'lottery type', '11x5')
	//.option('-p, --period-days <1,3,5>>', 'period days, supportted 1,3,5', 1)
	//.option('-d, --duration <1-390>', 'duration')
	.action(function(){
		var args = [].slice.call(arguments, 0);
		var opts = args[args.length - 1];
		opts.number = utils.padZero(args.slice(0, -1)[0], 2);
		absence(opts);
	});
	
program.command('absences')
	.description('list the absence(YL) numbers, sort with cxcs,bcyl,ycjl')
	.option('-t, --type <11x5|6p1>', 'lottery type', '11x5')
	//.option('-p, --period-days <1,3,5>>', 'period days, supportted 1,3,5', 1)
	.option('-s, --sort <cxcs|bcyl|ycjl>', 'sort by cxcs,bcyl,ycjl', 'bcyl')
	.option('-y, --yltype <smyl|wmyl|lmyl|qmyl>', 'YL type', 'wmyl')
	.option('-d, --duration <1-390>', 'duration', 10)
	.action(function(opts){
		absences(opts);
	});
	
program.command('*')
  .action(function() {
    utils.errorlog(COMMAND_ERROR);
  });
  
program.parse(process.argv);

/**
 * Print the lottery header
 *
 */
function header(type, action){
	utils.log('-', DEFAULT_HADER_LENGTH);
	console.log(LOTTERY_DESCRIPTION, type);
	//utils.log('-', DEFAULT_HADER_LENGTH);
	console.log("Lottery type: " + type);
	console.log("Execute program: %s", action);
	utils.log('-', DEFAULT_HADER_LENGTH);
}

/**
 * List the latest KJ numbers.
 *
 */
function latest(opts) {
  header(opts.type, 'latest');
  var parser = Parsers.newParser(opts.type);
  parser.latest(opts.duration);
}

/**
 * Download the latest KJ numbers.
 *
 */
function download(opts) {
  header(opts.type, 'download');
  var parser = Parsers.newParser(opts.type);
  if(opts.periodDays == '1d'){
	var fpath = 'data/11x5/11pick5_latestday.out';
  }
  else{
	var fpath = 'data/11x5/11pick5_latest'+parseInt(opts.periodDays)+'days.out';
  }
  opts.duration = 78*parseInt(opts.periodDays);
  parser.latest(opts.duration, function(results){
	var output = "";
	_u.each(results, function(result){
		output += result[0] + '\t' + result[1] + "\n";
	});
	fs.writeFileSync(fpath, output);
	console.log("Downloaded latest [" + opts.duration + "] data to [" + fpath + "].");
  });
}


/**
 * List the absences(YL) numbers.
 *
 */
function absences(opts) {
	header(opts.type, 'absences');
	var parser = Parsers.newParser(opts.type);
	parser.absences(opts.sort, opts.yltype, opts.duration);
}

/**
 * List the absence(YL) for given number.
 *
 */
function absence(opts) {
	header(opts.type, 'absence');
	var parser = Parsers.newParser(opts.type);
	parser.absence(opts.number);
}

/**
 * Statistics history numbers.
 *
 */
function statistics(opts) {
	header(opts.type, 'statistics ['+opts.strategy+']');
	var parser = Parsers.newParser(opts.type);
	
	console.log("parsing with "+opts.periodDays+" days data ...");
	switch(opts.strategy){
	case 'hits':
		parser.parse(opts, [Statistics.hits]);
		break;
	case 'groups':
		parser.parse(opts, [Statistics.groups]);
		break;
	case 'counts':
		parser.parse(opts, [Statistics.counts]);
		break;
	case 'all':
		parser.parse(opts, Statistics.all);
		break;
	default:
		console.log("Supported strategies: hits,groups,counts,all");
		break;
	}
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
}
